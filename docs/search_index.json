[["index.html", "Bayesian Statistics References", " Bayesian Statistics Renyi Qu 2021/01/30 References University of Alberta. Reinforcement Learning Specialization. Coursera Inc. Sutton, R.S., Barto, A.G., Reinforcement Learning: An Introduction. The MIT Press. "],["b.html", "1 Bayesian Statistics 1.1 Concepts", " 1 Bayesian Statistics 1.1 Concepts 1.1.1 Bayes Theorem Bayes Theorem - General \\[\\begin{equation*} P(A|B)=\\frac{P(A)P(B|A)}{P(B)} \\end{equation*}\\] Prior: \\(P(A)\\) - original subjective belief of \\(A\\) Posterior: \\(P(A|B)\\) - updated belief of \\(A\\) by the given data B Likelihood: \\(\\frac{P(B|A)}{P(B)}\\) - measure of extent to which assumption A provides support for the particular data distribution B Bayes Theorem - Discrete \\[\\begin{equation*} P(A_i|B)=\\frac{P(A_i)P(B|A_i)}{\\sum_{j=1}^{n}{P(A_j)P(B|A_j)}} \\end{equation*}\\] Bayes Theorem - Continuous \\[\\begin{equation*} \\pi(p|x)=\\frac{\\pi(p)P(x|p)}{\\int_{0}^{1}{\\pi(p)P(x|p)dp}} \\end{equation*}\\] Bayes Theorem - Data Analysis \\[\\begin{equation*} p(\\theta|y)=\\frac{p(\\theta)p(y|\\theta)}{p(y)} \\end{equation*}\\] \\(y\\): data \\(\\theta\\): parameter \\(p(y)\\) is not dependent on \\(\\theta\\) and \\(y\\) is fixed \\(\\Longrightarrow p(y)=\\text{const}\\) Bayes Theorem - Odds Ratio \\[\\begin{equation*} \\frac{p(\\theta_1|y)}{p(\\theta_2|y)}=\\frac{p(\\theta_1)}{p(\\theta_2)}\\frac{p(y|\\theta_1)}{p(y|\\theta_2)} \\end{equation*}\\] Posterior odds = Prior odds * likelihood ratio Likelihood Principle: for a given sample of data, any two probability models \\(p(y|)\\) that have the same likelihood function yield the same inference for \\(\\). 1.1.2 Core Philosophy The Core: \\[\\begin{equation*} \\text{Posterior}\\propto\\text{Prior}\\times\\text{Likelihood} \\end{equation*}\\] The Steps: Define prior distribution Gather data to generate likelihood Generate \\(\\&amp;\\) Analyze posterior The Intuition: \\[\\begin{equation*} \\text{Prior}\\Longrightarrow\\text{Posterior}\\Big(\\xrightarrow{\\text{update}}\\text{Prior}\\Big) \\end{equation*}\\] Uninformative prior \\(\\rightarrow\\) data-driven posterior informative prior \\(\\rightarrow\\) posterior = mixture of prior \\(\\&amp;\\) data \\(\\rightarrow\\) YES! too informative prior \\(\\rightarrow\\) gather more data to modify such belief \\(\\rightarrow\\) prevent prior-driven posterior too much data \\(\\rightarrow\\) data-dominated posterior \\(\\rightarrow\\) NO! 1.1.3 Conjugacy Conjugacy: posterior \\(\\&amp;\\) prior are in the same distribution family. Without conjugacy, the integral in the likelihood for continuous data is almost impossible to solve without numerical approximation. There are so far 3 conjugate families. Conjugate Family 1 - Beta-Binomial: Prior: \\[\\begin{equation*} \\pi(p)=\\text{Beta}(\\alpha,\\beta)=\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}p^{\\alpha-1}(1-p)^{\\beta-1} \\end{equation*}\\] Likelihood: \\[\\begin{equation*} P(x|p)=\\text{Bin}(n,p)=\\begin{pmatrix}n \\\\ x\\end{pmatrix}p^xq^{n-x} \\end{equation*}\\] Posterior: \\[\\begin{align*} \\pi(p|x)&amp;=\\frac{\\text{Beta}(\\alpha,\\beta)\\cdot\\text{Bin}(n,p)}{P(x)} \\\\ &amp;=\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}p^{\\alpha-1}(1-p)^{\\beta-1}\\cdot\\begin{pmatrix}n \\\\ k\\end{pmatrix}p^xq^{n-x} \\\\ &amp;=\\frac{\\Gamma(\\alpha+\\beta+n)}{\\Gamma(\\alpha+x)\\Gamma(\\beta+n-x)}p^{x+\\alpha-1}(1-p)^{n-x+\\beta-1} \\\\ &amp;=\\text{Beta}(\\alpha+x,\\beta+n-x) \\end{align*}\\] Conjugate Family 2 - Gamma-Poisson: Prior: \\[\\begin{equation*} \\pi(\\lambda)=\\text{Gamma}(\\alpha,\\beta)=\\frac{\\beta^\\alpha}{\\Gamma(\\alpha)}\\lambda^{\\alpha-1}e^{-\\beta\\lambda} \\end{equation*}\\] Likelihood: \\[\\begin{align*} &amp;P(\\lambda|x)=\\text{Pois}(\\lambda)=\\frac{e^{-\\lambda}\\lambda^x}{x!} \\\\ &amp;\\mathcal{L}(\\lambda|\\mathbf{x})=\\prod_{i=1}^{n}{\\frac{e^{-\\lambda}\\lambda^x_i}{x_i!}}=\\frac{e^{-n\\lambda}\\lambda^{\\sum{x_i}}}{\\prod_{i=1}^{n}{(x_i!)}} \\end{align*}\\] Posterior: \\[\\begin{align*} \\pi(\\lambda|\\mathbf{x})&amp;=\\frac{\\beta^\\alpha}{\\Gamma(\\alpha)}\\lambda^{\\alpha-1}e^{-\\beta\\lambda}\\cdot\\frac{e^{-n\\lambda}\\lambda^{\\sum{x_i}}}{\\prod_{i=1}^{n}{(x_i!)}} \\\\ &amp;=\\frac{\\beta^{\\alpha}}{\\Gamma(\\alpha+\\sum{x_i})}\\lambda^{\\alpha-1+\\sum{x_i}}e^{-(\\beta+n)\\lambda} \\\\ &amp;=\\text{Gamma}(\\alpha+\\sum{x_i},\\beta+n) \\end{align*}\\] Conjugate Family 3 - Normal-Normal: Prior: \\[\\begin{equation*} \\pi(\\mu)=N(u,v^2)=\\frac{1}{\\sqrt{2\\pi}v}\\exp{\\bigg(-\\frac{1}{2}\\Big(\\frac{\\mu-u}{v}\\Big)^2\\bigg)} \\end{equation*}\\] Likelihood: \\[\\begin{align*} &amp;P(x|\\mu)=N(\\mu,\\sigma^2)=\\frac{1}{\\sqrt{2\\pi}\\sigma}\\exp{\\bigg(-\\frac{1}{2}\\Big(\\frac{x-\\mu}{\\sigma}\\Big)^2\\bigg)} \\\\ &amp;\\mathcal{L}(\\mathbf{x}|\\mu)=\\Big(\\frac{1}{\\sqrt{2\\pi}\\sigma}\\Big)^n\\prod_{i=1}^{n}{\\exp{\\bigg(-\\frac{1}{2}\\Big(\\frac{x_i-\\mu}{\\sigma}\\Big)^2\\bigg)}} \\end{align*}\\] Posterior: \\[\\begin{align*} \\pi(\\mu|x)&amp;\\propto\\exp{\\Big\\{-\\frac{1}{2}\\Big[\\frac{1}{v^2}(\\mu-u)^2+\\frac{1}{\\sigma^2}\\sum_{i=1}^{n}{(x-\\mu)^2}\\Big]\\Big\\}} \\\\ &amp;\\propto\\exp{\\Big\\{-\\frac{1}{2}\\frac{1}{\\sigma^2v^2}\\Big[v^2\\sum_{i=1}^{n}{\\big(x_i^2-2x_i\\mu+\\mu^2\\big)}+\\sigma^2\\big(\\mu^2-2\\mu u+u^2\\big)\\Big]\\Big\\}} \\\\ &amp;\\propto\\exp{\\Big\\{-\\frac{1}{2}\\frac{1}{\\sigma^2v^2}\\Big[\\mu^2(\\sigma^2+nv^2)-2\\mu(u\\sigma^2+n\\bar(x)v^2)+(u^2\\sigma^2+v^2\\sum{x_i^2})\\Big]\\Big\\}} \\\\ &amp;\\propto\\exp{\\Bigg\\{-\\frac{1}{2}\\Bigg[\\Bigg(\\frac{1}{v^2}+\\frac{n}{\\sigma^2}\\Bigg)\\Bigg(\\mu-\\frac{\\frac{u}{v^2}+\\frac{n\\bar{x}}{\\sigma^2}}{\\frac{1}{v^2}+\\frac{n}{\\sigma^2}}\\Bigg)^2\\Bigg]\\Bigg\\}} \\\\ &amp;=N\\Bigg(\\frac{\\frac{u}{v^2}+\\frac{n\\bar{x}}{\\sigma^2}}{\\frac{1}{v^2}+\\frac{n}{\\sigma^2}},\\frac{\\sigma^2v^2}{\\sigma^2+nv^2}\\Bigg) \\end{align*}\\] 1.1.4 Predictive Inference Prior predictive distribution: \\[\\begin{equation*} p(y)=\\int{p(y|\\theta)p(\\theta)d\\theta} \\end{equation*}\\] = marginal distribution of \\(y\\) \\(y\\): unknown but observable data \\(\\theta\\): parameter Prior: not conditional on anything Predictive: prediction on observable Posterior predictive distribution: \\[\\begin{equation*} p(\\tilde{y}|y)=\\int{p(\\tilde{y}|\\theta)p(\\theta|y)d\\theta} \\end{equation*}\\] = average of conditional predictions over posterior distribution of \\(\\theta\\) \\(\\tilde{y}\\): unknown observable following the same process as \\(y\\) Posterior: conditional on observed \\(y\\) Predictive: prediction on observable "],["cls.html", "2 Classification 2.1 Logistic Regression 2.2 k-Nearest Neighbors 2.3 Gaussian Discriminant Analysis 2.4 Naive Bayes Classifier 2.5 SVM", " 2 Classification 2.1 Logistic Regression Problem Setting Data: Observed pairs \\((x,y)\\), where \\(x\\in\\mathcal{X}\\) &amp; \\(y\\in\\mathcal{Y}\\) \\(\\mathcal{Y}=\\{-1,+1\\}\\lor\\{0,1\\}\\): binary classification \\(\\mathcal{Y}=\\{1,...,K\\}\\): multiclass classification Goal: Find a classifier \\(f\\) that can map input \\(x\\) to class \\(y\\): \\(y=f(x):\\ &quot;x\\in\\mathcal{X}&quot;\\rightarrow\\ &quot;y\\in\\mathcal{Y}&quot;\\) Model \\[\\begin{equation} \\hat{y}=g(w^Tx) \\end{equation}\\] \\(g(z)\\): a function that converts \\(w^Tx\\) to binary value Sigmoid Function (see Deep Learning for more funcs) \\[\\begin{equation} g(z)=\\sigma(z)=\\frac{1}{1+e^{-z}} \\end{equation}\\] Derivative (you will know why we need this in Deep Learning) \\[\\begin{align} g&#39;(z)&amp;=\\frac{d}{dz}\\frac{1}{1+e^{-z}} \\\\ &amp;=\\frac{e^{-z}(+1-1)}{(1+e^{-z})^2} \\\\ &amp;=g(z)(1-g(z)) \\end{align}\\] Cost Function single training example (derivation later) \\[\\begin{equation} \\mathcal{L}(\\hat{y},y)=-(y\\log{\\hat{y}}+(1-y)\\log{(1-\\hat{y})}) \\end{equation}\\] If \\(y=1\\rightarrow\\mathcal{L}(\\hat{y},y)=-\\log{\\hat{y}}\\rightarrow\\) want \\(\\mathcal{L}\\downarrow\\leftrightarrow\\hat{y}\\uparrow\\)\\(\\rightarrow\\hat{y}=1\\) If \\(y=0\\rightarrow\\mathcal{L}(\\hat{y},y)=-\\log{(1-\\hat{y})}\\rightarrow\\) want \\(\\mathcal{L}\\downarrow\\leftrightarrow\\hat{y}\\downarrow\\)\\(\\rightarrow\\hat{y}=0\\) entire training set \\[\\begin{equation} \\mathcal{J}(w)=\\frac{1}{m}\\sum_{i=1}^{m}\\mathcal{L}(\\hat{y}^{(i)},y^{(i)})=\\text{mean}(\\mathcal{L}) \\end{equation}\\] Probabilistic Interpretation Assumptions \\[\\begin{align} P(y=1|x,w)&amp;=\\hat{y} \\\\ P(y=0|x,w)&amp;=1-\\hat{y} \\end{align}\\] Probabilistic Model of LogReg \\[\\begin{equation} p(y|x,w)=\\hat{y}^y(1-\\hat{y})^{1-y} \\end{equation}\\] Likelihood Function \\[\\begin{equation} L(w)=\\prod_{i=1}^{m}(\\hat{y}^{(i)})^{y^{(i)}}(1-\\hat{y}^{(i)})^{1-y^{(i)}} \\end{equation}\\] Log Likelihood \\[\\begin{align} l(w)&amp;=\\sum_{i=1}^{m}(y^{(i)}\\log{\\hat{y}^{(i)}}+(1-y^{(i)})\\log{(1-\\hat{y}^{(i)})}) \\\\ l(w)&amp;=-\\sum_{i=1}^{m}\\mathcal{L}(\\hat{y},y) \\end{align}\\] MLE \\[\\begin{align} \\frac{\\partial l(w)}{\\partial w_j}&amp;=(\\frac{y}{g(w^Tx)}-\\frac{1-y}{1-g(w^Tx)})\\frac{\\partial g(w^Tx)}{\\partial w_j} \\\\ &amp;=(\\frac{y}{g(w^Tx)}-\\frac{1-y}{1-g(w^Tx)})g(w^Tx)(1-g(w^Tx))\\frac{\\partial(w^Tx)}{\\partial w_j} \\\\ &amp;=(y(1-g(w^Tx))-(1-y)g(w^Tx))x_j \\\\ &amp;=(y-\\hat{y})x_j \\end{align}\\] Gradient Descent \\[\\begin{align} w_j &amp;:= w_j-\\alpha\\frac{\\partial\\mathcal{L}(w)}{\\partial w_j} \\\\ &amp;=w_j+\\alpha(y-\\hat{y})x_j \\end{align}\\] Why is it also called Gradient Ascent? \\(\\because\\) we are trying to minimize the loss function \\(\\Leftrightarrow\\) maximize the likelihood function 2.2 k-Nearest Neighbors Algorithm For a new input \\(x\\), Return the \\(k\\) points closest to \\(x\\), indexed as \\(x_{i_1},...,x_{i_k}\\). Return the majority votes of \\(y_{i_1},...,y_{i_k}\\). Distances (how to measure closest) Euclidean distance: default measurement \\[\\begin{equation} \\|u-v\\|_ 2=\\Big(\\sum_{i=1}^n(u_i-v_i)^2\\Big)^{\\frac{1}{2}} \\end{equation}\\] \\(l_p\\): variation on Euclidean \\[\\begin{equation} \\|u-v\\|_ p=\\Big(\\sum_{i=1}^n|u_i-v_i|^p\\Big)^{\\frac{1}{p}}\\ \\ \\ |\\ p\\in[1,\\infty] \\end{equation}\\] Edit distance: for strings #modifications required to transform one string to the other Correlation distance: for signals how correlated 2 vectors are for signal detection \\(k\\) Smaller \\(k\\) \\(\\Rightarrow\\) smaller training error but could lead to overfitting Larger \\(k\\) \\(\\Rightarrow\\) more stable predictions due to voting Statistical Setting for Classification Performance Prediction accuracy: \\(P(f(x)=y)\\) Prediction error: \\(P(f(x)\\neq y)\\) Key Assumption for Supervised Learning \\[\\begin{equation} (x_i,y_i)\\sim\\mathcal{P}\\ \\ \\ |\\ \\ \\ i=1,\\cdots,n \\end{equation}\\] i.i.d. (independent &amp; identically distributed) We assume that the future should look like the past. 2.3 Gaussian Discriminant Analysis Learning Algorithms Discriminative Learning Algorithms \\[\\begin{equation} \\text{model }p(y|x)\\text{ directly}\\ \\ \\ (X \\Rightarrow Y) \\end{equation}\\] Generative Learning Algorithms \\[\\begin{equation} \\text{model }p(x|y)\\ \\&amp;\\ p(y)\\Rightarrow\\text{ use Bayes Theorem to get }p(y|x) \\end{equation}\\] Bayes Theorem \\[\\begin{equation} p(y|x)=\\frac{p(x|y)p(y)}{p(x)} \\end{equation}\\] Prior: \\(p(y)\\) Posterior: \\(p(y\\|x)\\) Simplification: \\(\\because\\) we are trying to find the output \\(y\\) with the highest probability given \\(x\\) \\(\\therefore\\) we can simplify Bayes Theorem for our purpose: \\[\\begin{align} \\mathop{\\arg\\max}_ {y}{p(y|x)}&amp;=\\mathop{\\arg\\max}_ {y}{\\frac{p(x|y)p(y)}{p(x)}} \\\\ &amp;=\\mathop{\\arg\\max}_ {y}{p(x|y)p(y)} \\end{align}\\] Bayes Theorem = the core of Generative Learning Algorithms Assumption: Multivariate Gaussian Distribution \\[\\begin{equation} p(x|\\mu,\\Sigma)=\\frac{1}{(2\\pi)^{\\frac{n}{2}}|\\Sigma|^{\\frac{1}{2}}}e^{\\big(-\\frac{1}{2}(x-\\mu)^T\\Sigma^{-1}(x-\\mu)\\big)} \\end{equation}\\] It is literally the same as Gaussian Distribution but with vector parameters: mean vector:  \\(\\mu\\in\\mathbb{R}^n\\) covariance matrix: \\(\\Sigma\\in\\mathbb{R}^{n\\times n}\\)  As a reminder and a comparison, here is the univariate version: \\[\\begin{equation} p(x|\\mu,\\sigma)=\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} \\end{equation}\\] Model \\[\\begin{align} y&amp;\\sim \\text{Bernoulli}{(\\phi)} \\\\ x|y=0&amp;\\sim N(\\mu_0,\\Sigma) \\\\ x|y=1&amp;\\sim N(\\mu_1,\\Sigma) \\\\ \\end{align}\\] Probabilistic Interpretation \\[\\begin{align} p(y)&amp;=\\phi^y(1-\\phi)^{1-y} \\\\ p(x|y=0)&amp;=\\frac{1}{(2\\pi)^{\\frac{n}{2}}|\\Sigma|^{\\frac{1}{2}}}e^{\\big(-\\frac{1}{2}(x-\\mu_0)^T\\Sigma^{-1}(x-\\mu_0)\\big)} \\\\ p(x|y=1)&amp;=\\frac{1}{(2\\pi)^{\\frac{n}{2}}|\\Sigma|^{\\frac{1}{2}}}e^{\\big(-\\frac{1}{2}(x-\\mu_1)^T\\Sigma^{-1}(x-\\mu_1)\\big)} \\end{align}\\] log likelihood \\[\\begin{equation} l(\\phi,\\mu_0,\\mu_1,\\Sigma)=\\log{\\prod_{i=1}^{m}{p(x^{(i)}|y^{(i)};\\mu_0,\\mu_1,\\Sigma)p(y^{(i)};\\phi)}} \\end{equation}\\] MLE \\[\\begin{align} \\phi &amp;= \\frac{1}{m}\\sum_{i=1}^m{\\text{I}\\{ y^{(i)}=l \\}} \\\\ \\mu_0 &amp;= \\frac{\\sum_{i=1}^m{\\text{I}\\{ y^{(i)}=0 \\}x^{(i)}}}{\\sum_{i=1}^m{\\text{I}\\{ y^{(i)}=0 \\}}} \\\\ \\mu_1 &amp;= \\frac{\\sum_{i=1}^m{\\text{I}\\{ y^{(i)}=1 \\}x^{(i)}}}{\\sum_{i=1}^m{\\text{I}\\{ y^{(i)}=1 \\}}} \\\\ \\Sigma &amp;= \\frac{1}{m}\\sum_{i=1}^m{(x^{(i)}-\\mu_{y^{(i)}})(x^{(i)}-\\mu_{y^{(i)}})^T} \\end{align}\\] GDA vs LogReg GDA makes stronger modeling assumptions about data data efficient when assumptions (Gaussian distributions) are approximately correct LogReg makes weaker modeling assumptions about data data efficient when assumptions (Gaussian distributions) are not necessarily correct (e.g. \\(x\\|y\\sim \\text{Poisson}(\\lambda_1)\\) instead of \\(N(\\mu_0,\\Sigma)\\)) 2.4 Naive Bayes Classifier GDA vs NB GDA: \\(x\\) = continuous, real-valued vectors NB: \\(x\\) = discrete-valued vectors (e.g. text classification) Text Encoding (more in DL/RNN) We encode a text sentence into a vector of the same length as our dictionary (like a Python dictionary with vocabulary and their indices as key-value pairs): \\[\\begin{equation} x=\\begin{bmatrix} 0 \\\\ 0 \\\\ \\vdots \\\\ 1 \\\\ \\vdots \\\\ 1 \\\\ 1 \\\\ \\vdots \\\\ 0 \\end{bmatrix} \\begin{matrix} \\text{a} \\\\ \\text{abandon} \\\\ \\vdots \\\\ \\text{pewdiepie} \\\\ \\vdots \\\\ \\text{subscribe} \\\\ \\text{to} \\\\ \\vdots \\\\ \\text{zuck} \\end{matrix} \\end{equation}\\] The original sentence was Subscribe to Pewdiepie! and this text encoding method uses lowercases, throws punctuations and ignores the order of the sentence. This is convenient in some cases (e.g. spam email classification) but awful in the other cases (e.g. news/report-writer bots) Notice that \\(x\\in \\{0,1\\}^{\\text{len(dict)}}\\). Why notice this? Because we now have \\(2^\\text{len(dict)}\\) possible outcomes for \\(x\\). When we have a dictionary of over 20000 words, we have a \\(\\(2^{20000}-1\\)\\)-dimensional parameter vector. Have fun with that, laptop. Assumption: Conditional Independence \\[\\begin{equation} p(x_i|y)=p(x_i|y,x_j)\\ \\ \\ \\forall j\\neq i \\end{equation}\\] meaning: Given \\(y\\) as the condition, \\(x_i\\) is independent of \\(x_j\\). In the case of spam email classification, if we know that the email is spam, then whether or not pewdiepie is in the sentence does not change our belief of whether or not subscribe is in the sentence. Therefore, we can simplify our \\(p(x\\|y)\\) into: \\[\\begin{equation} p(x_1,...,x_{\\text{len(dict)}}|y)=\\prod_{i=1}^{n}{p(x_i|y)} \\end{equation}\\] Model \\[\\begin{align} \\phi_{i|y=1}&amp;=p(x_i=1|y=1) \\\\ \\phi_{i|y=0}&amp;=p(x_i=1|y=0) \\\\ \\phi_y&amp;=p(y=1) \\end{align}\\] Joint Likelihood \\[\\begin{equation} \\mathcal{L}(\\phi_y,\\phi_{i|y=0},\\phi_{i|y=1})=\\prod_{i=1}^{m}{p(x^{(i)},y^{(i)})} \\end{equation}\\] MLE \\[\\begin{align} \\phi_{j|y=1}&amp;=\\frac{\\sum_{i=1}^m{I\\{x_j^{(i)}=1\\land y^{(i)}=1\\}}}{\\sum_{i=1}^m{I\\{y^{(i)}=1\\}}} \\\\ \\phi_{j|y=0}&amp;=\\frac{\\sum_{i=1}^m{I\\{x_j^{(i)}=1\\land y^{(i)}=0\\}}}{\\sum_{i=1}^m{I\\{y^{(i)}=0\\}}} \\\\ \\phi_y&amp;=\\frac{\\sum_{i=1}^m{I\\{y^{(i)}=1\\}}}{m} \\end{align}\\] Quite intuitive. For example, \\(\\phi_{j\\|y=0}\\) = the fraction of non-spam emails with the word \\(j\\) in it. Prediction \\[\\begin{align} p(y=1|x_\\text{new})&amp;=\\frac{p(x_\\text{new}|y=1)p(y=1)}{p(x_\\text{new})} \\\\ &amp;=\\frac{\\prod_{i=1}^n{p(x_i|y=1)}\\cdot p(y=1)}{\\prod_{i=1}^n{p(x_i|y=1)}\\cdot p(y=1)+\\prod_{i=1}^n{p(x_i|y=0)}\\cdot p(y=0)} \\end{align}\\] Again, the formula is tedious but very intuitive. The \\(y\\) with the higher posterior probability will be chosen as the final prediction. Apply NB in GDA cases? Discretize: Just cut the continuous, real-valued \\(x\\) into small intervals and label them with a discrete-valued scale. 2.4.1 Laplace Smoothing Problem: What if there is a new word mrbeast in the email for prediction that our NB classifier has never learnt ever since it was born? A human would look it up on a dictionary, and so would our NB classifier. Assume the word mrbeast is the 1234th word in the dictionary, then: \\[\\begin{align} \\phi_{1234|y=1}&amp;=\\frac{\\sum_{i=1}^m{I\\{x_{1234}^{(i)}=1\\land y^{(i)}=1\\}}}{\\sum_{i=1}^m{I\\{y^{(i)}=1\\}}}=0 \\\\ \\phi_{1234|y=0}&amp;=\\frac{\\sum_{i=1}^m{I\\{x_{1234}^{(i)}=1\\land y^{(i)}=0\\}}}{\\sum_{i=1}^m{I\\{y^{(i)}=0\\}}}=0 \\\\ \\end{align}\\] Yes. NB thinks that the probability of seeing this word in either spam or non-spam email is \\(0\\), and therefore it would predict that: \\[\\begin{align} p(y=1|x_\\text{new})&amp;=\\frac{\\prod_{i=1}^n{p(x_i|y=1)}\\cdot p(y=1)}{\\prod_{i=1}^n{p(x_i|y=1)}\\cdot p(y=1)+\\prod_{i=1}^n{p(x_i|y=0)}\\cdot p(y=0)} \\\\ &amp;=\\frac{0}{0} \\end{align}\\] Because both numerator and denominator contains \\(p(x_{1234\\|y})=0\\). In summary, during prediction, if NB has never learnt a word \\(j\\), there will always \\(\\phi_j=0\\) ruining the entire prediction. How do we estimate the unknown? Algorithm: \\[\\begin{equation} \\phi_j=\\frac{\\sum_{i=1}^m{I\\{z^{(i)}=j\\}}+1}{m+k} \\end{equation}\\] where \\(k=\\text{#features}\\) if you forget. Lets check if it still satisfies our condition: \\[\\begin{equation} \\sum_{j=1}^k{\\phi_j}=\\sum_{j=1}^k{\\frac{\\sum_{i=1}^m{I\\{z^{(i)}=j\\}}+1}{m+k}}=\\frac{m+k}{m+k}=1 \\end{equation}\\] Nice. It still satisfies the basic sum rule. The estimates in NB will now become: \\[\\begin{align} \\phi_{j|y=1}&amp;=\\frac{\\sum_{i=1}^m{I\\{x_{j}^{(i)}=1\\land y^{(i)}=1\\}}+1}{\\sum_{i=1}^m{I\\{y^{(i)}=1\\}}+2} \\\\ \\phi_{j|y=0}&amp;=\\frac{\\sum_{i=1}^m{I\\{x_{j}^{(i)}=1\\land y^{(i)}=0\\}}+1}{\\sum_{i=1}^m{I\\{y^{(i)}=0\\}}+2} \\\\ \\end{align}\\] 2.5 SVM 2.5.1 Intro Problem with Classification: This is a binary classification. The circles &amp; crosses are training examples with two different labels. The black line is the classifier, and it is able to classify circle and cross. For points like \\(\\text{A}\\) that are distant from the classifier, we are quite confident that they belong to cross. However, what about \\(\\text{B}\\) and \\(\\text{C}\\) that are super close to the decision boundary? Based on this classifier, \\(\\text{B}\\) belongs to cross and \\(\\text{C}\\) belongs to circle, but how confident are we about our classifier? What if our classifier is just slightly off and \\(\\text{C}\\) was actually cross? This, is SVM in a nutshell. 2.5.2 Margins Functional Margin \\[\\begin{equation} \\hat{\\gamma}^{(i)}=y^{(i)}(w^Tx+b)\\ \\ \\ \\ \\ \\ \\|\\ y\\in\\{-1,1\\} \\end{equation}\\] Intuition: \\(\\hat{\\gamma}^{(i)}\\uparrow\\uparrow\\ \\rightarrow\\text{confidence}\\uparrow\\uparrow\\) When \\(y=1\\ \\rightarrow w^Tx+b \\&gt;\\&gt; 0\\). When \\(y=-1\\\\rightarrow w^Tx+b \\&lt;\\&lt; 0\\). Problem with functional margin: if \\(w\\rightarrow kw\\) and \\(b\\rightarrow kb\\) (where \\(k&gt;0\\)), then \\(g(w^Tx+b)=g(k(w^Tx+b))\\) but our \\(g(z)\\) here follows: \\[g(z)=\\begin{cases} -1&amp; \\text{if $z&lt;0$} \\\\ 1&amp; \\text{if $z&gt;0$} \\\\ \\end{cases}\\] that is, \\(z\\) and \\(kz\\) makes no difference for \\(g(z)\\). HOWEVER, the functional margin does change by a factor of \\(k\\) here, meaning that a large functional margin does not necessarily represent a confident prediction in this case.  Geometric Margin Refer back to the figure above. If we want to find the distance between point \\(A\\) and the decision boundary, which is \\(AA&#39;=\\gamma^{(i)}\\), what should we do? We normalize \\(w\\) to find the unit vector \\(\\frac{w}{\\lVert w \\rVert}\\), and we also have \\(A=x^{(i)}\\). Because \\(AA&#39;\\parallel \\overrightarrow{w}\\), we can find \\(A&#39;\\) by: \\[\\begin{equation} A&#39;=x^{(i)}-\\gamma^{(i)}\\frac{w}{\\lVert w \\rVert} \\end{equation}\\] and because \\(A&#39;\\) is on the decision boundary \\(w^Tx+b=0\\), we get \\[\\begin{align} &amp;w^TA&#39;+b=0 \\\\ \\Longrightarrow\\ &amp;w^Tx^{(i)}+b=w^T\\frac{w}{\\lVert w \\rVert}\\gamma^{(i)} \\ \\ \\ \\ \\ \\ \\ \\ \\ \\bigg(w^T\\frac{w}{\\lVert w \\rVert}=\\frac{\\lVert w \\rVert^2}{\\lVert w \\rVert}\\bigg) \\\\ \\Longrightarrow\\ &amp;\\gamma^{(i)}=\\bigg(\\frac{w}{\\lVert w \\rVert}\\bigg)^Tx^{(i)}+\\frac{b}{\\lVert w \\rVert} \\end{align}\\] and if we generalize it with both classes of \\(y^{(i)}\\): \\[\\begin{equation} \\gamma^{(i)}=y^{(i)}\\Bigg(\\bigg(\\frac{w}{\\lVert w \\rVert}\\bigg)^Tx^{(i)}+\\frac{b}{\\lVert w \\rVert}\\Bigg) \\end{equation}\\] 2.5.3 Optimization: Lagrange Duality Constrained optimization problem \\[\\begin{equation} \\mathop{\\min}_ {w} f(w)\\ \\ \\text{s.t.}\\ h_i(w)=0\\ \\ \\forall i\\in\\{1,...,m\\} \\end{equation}\\] Interpretation: Minimize a function \\(f(w)\\) on the set \\(\\{w\\ \\|\\ h_i(w)=0\\ \\forall i\\in\\{1,...,m\\}\\}\\) where \\(w\\) satisfies the equality constraints. Lagrangian \\[\\begin{equation} \\mathcal{L}(w,\\beta)=f(w)+\\sum_{i=1}^{m}{\\beta_ih_i(w)} \\end{equation}\\] where \\(\\beta_i=\\) Lagrange multipliers, and then we solve it by \\(\\frac{\\partial{\\mathcal{L}}}{\\partial{w_i}}=0\\) and \\(\\frac{\\partial{\\mathcal{L}}}{\\partial{\\beta_i}}=0\\) Generalized constrained optimization problem \\[\\begin{align} \\mathop{\\min}_ {w} f(w)\\ \\ \\text{s.t.}\\ h_i(w)=0\\ \\ &amp;\\forall i\\in\\{1,...,m\\} \\\\ g_i(w)\\leq 0\\ \\ &amp;\\forall i\\in\\{1,...,n\\} \\end{align}\\] Interpretation: Add an inequality constraint to the original optimization problem. Generalized Lagrangian \\[\\begin{equation} \\mathcal{L}(w,\\alpha,\\beta)=f(w)+\\sum_{i=1}^{m}{\\beta_ih_i(w)}+\\sum_{i=1}^{n}{\\alpha_ig_i(w)} \\end{equation}\\] Primal optimization problem \\[\\begin{equation} p^* =\\mathop{\\min}_ {w} \\theta_{\\mathcal{P}}(w)=\\mathop{\\min}_ {w} \\mathop{\\max}_ {\\alpha,\\beta:\\alpha_i\\geq0} \\mathcal{L}(w,\\alpha,\\beta) \\end{equation}\\] Interpretation: Under the 2 primal constraints above, the maximum of our generalized lagrangian (labeled as \\(\\theta_{\\mathcal{P}}(w)\\)) is basically just \\(f(w)\\) as long as \\(\\alpha_i\\geq0\\ \\forall i\\in\\{1,...,m\\}\\): \\[\\begin{align} &amp;\\sum_{i=1}^{m}{\\beta_ih_i(w)}\\longrightarrow\\sum_{i=1}^{m}{\\beta_i\\cdot0}\\longrightarrow0 \\\\ &amp;\\sum_{i=1}^{m}{\\alpha_ig_i(w)}\\xrightarrow{\\alpha\\geq0,g(w)\\leq0}\\sum_{i=1}^{m}{(+0\\cdot-0)}\\longrightarrow0 \\end{align}\\] Therefore, this is just another way to write our generalized optimization problem. Dual optimization problem \\[\\begin{equation} d^* =\\mathop{\\max}_ {\\alpha,\\beta:\\alpha_i\\geq0} \\theta_{\\mathcal{D}}(\\alpha,\\beta)=\\mathop{\\max}_ {\\alpha,\\beta:\\alpha_i\\geq0} \\mathop{\\min}_ {w} \\mathcal{L}(w,\\alpha,\\beta) \\end{equation}\\] Interpretation: This is basically the same problem as primal except that \\(\\mathop{\\max}\\) and \\(\\mathop{\\min}\\) are exchanged. However, their values are not necessarily equal. Instead, they follow the following relationship: \\[\\begin{equation} d^* \\leq p^* \\end{equation}\\] The intuition is simple. Suppose we have a function \\(f(x,y)\\), then: \\[\\begin{align} \\mathop{\\min}_ {w} f(x,w)\\leq f(x,y)\\leq \\mathop{\\max}_ {v} f(v,y) \\\\ \\mathop{\\min}_ {u} f(u,y)\\leq f(x,y)\\leq \\mathop{\\max}_ {t} f(x,t) \\end{align}\\] This definitely holds for all functions in the world. Therefore, the following also holds: \\[\\begin{equation} \\mathop{\\max}_ {x} \\big(\\mathop{\\min}_ {w} f(x,w)\\big)\\leq \\mathop{\\min}_ {y} \\big(\\mathop{\\max}_ {v} f(v,y)\\big) \\end{equation}\\] which is basically saying that \\(\\mathop{\\max}\\mathop{\\min}\\leq\\mathop{\\min}\\mathop{\\max}\\) for all multivariate functions, including our Lagrangian. Karush-Kuhn-Tucker Conditions (KKT) Under the above assumptions, there must exist \\(w^*,\\alpha^ *,\\beta^ *\\) so that \\(w^*\\) is the solution to the primal problem \\(\\alpha^ *,\\beta^ *\\) are the solution to the dual problem \\(p^* =d^* =\\mathcal{L}(w^* ,\\alpha^ * ,\\beta^ * )\\) KKT Conditions: \\(w^*,\\alpha^ *,\\beta^ *\\) must satisfy: \\[\\begin{align} \\frac{\\partial}{\\partial w_i}\\mathcal{L}(w^*,\\alpha^*,\\beta^* )&amp;=0\\ \\ i=1,\\cdots,n \\\\ \\frac{\\partial}{\\partial \\beta_i}\\mathcal{L}(w^*,\\alpha^*,\\beta^* )&amp;=0\\ \\ i=1,\\cdots,l \\\\ \\alpha_i^* g_i(w^* )&amp;=0\\ \\ i=1,\\cdots,k \\\\ g_i(w^* )&amp;\\leq0\\ \\ i=1,\\cdots,k \\\\ \\alpha_i^* &amp;\\geq0\\ \\ i=1,\\cdots,k \\end{align}\\] "]]
